using aquadrom.Objects;
using DB;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace aquadrom
{
    public partial class HarmonogramForm : Form
    {

        private bool loadingFromDB;
        private bool settingUp;
        private bool valueChanged;
        private bool saved;
        private Harmonogram harmonogram;

        public HarmonogramForm()
        {
            settingUp = true;
            InitializeComponent();
            settingUp = false;
        }

        private void HarmonogramForm_Load(object sender, EventArgs e)
        {
            loadingFromDB = true;
            valueChanged = true;
            saved = true;
            harmonogram = new Harmonogram(dataGridView1);

            this.pracownikTableAdapter.Fill(this.aquadromDataSet.Pracownik);
            CreateDayColumns();
            comboBoxMonths.SelectedIndex = DateTime.Now.Month - 1;
            comboBoxYear.SelectedItem = DateTime.Now.Year.ToString();

            loadingFromDB = false;

        }

        private void FillFromDB()
        {
            loadingFromDB = true;
            DBAdapter adapter = new DBAdapter();
            DateTime iDate = new DateTime(GetYearFromCombo(), GetMonthFromCombo(), 1);
            ClearHours();

            for (int nrDnia = 1; nrDnia <= DateTime.DaysInMonth(GetYearFromCombo(), GetMonthFromCombo()); nrDnia++)
            {
                DataTable godziny = adapter.SelectWorkersAtDate(iDate);

                for (int j = 0; j < godziny.Rows.Count; j++)
                {
                    for (int nrWierszaGrid = 0; nrWierszaGrid < dataGridView1.RowCount - 1; nrWierszaGrid++)
                    {
                        string[] val = new string[4];
                        val[0] = godziny.Rows[j][0].ToString();
                        val[1] = godziny.Rows[j][1].ToString();
                        val[2] = dataGridView1.Rows[nrWierszaGrid].Cells[0].Value.ToString();
                        val[3] = dataGridView1.Rows[nrWierszaGrid].Cells[1].Value.ToString();
                        if (godziny.Rows[j][0].ToString() == dataGridView1.Rows[nrWierszaGrid].Cells[0].Value.ToString()
                            && godziny.Rows[j][1].ToString() == dataGridView1.Rows[nrWierszaGrid].Cells[1].Value.ToString())
                        {
                            dataGridView1.Rows[nrWierszaGrid].Cells[nrDnia.ToString() + "od"].Value = godziny.Rows[j][2].ToString();
                            dataGridView1.Rows[nrWierszaGrid].Cells[nrDnia.ToString() + "do"].Value = godziny.Rows[j][3].ToString();
                        }
                    }
                }

                iDate = iDate.AddDays(1);
            }
            loadingFromDB = false;

        }

        private int GetYearFromCombo()
        {
            return (Convert.ToInt32(comboBoxYear.SelectedIndex.ToString()) >= 0) ? Convert.ToInt32(comboBoxYear.SelectedItem.ToString()) : DateTime.Now.Year;
        }
        private int GetMonthFromCombo()
        {
            return comboBoxMonths.SelectedIndex + 1 > 0 ? comboBoxMonths.SelectedIndex + 1 : DateTime.Now.Month;
        }

        private void ClearHours()
        {
            for (int j = 0; j < dataGridView1.RowCount - 1; j++)
                for (int i = 3; i < dataGridView1.ColumnCount; i++)
                    dataGridView1.Rows[j].Cells[i].Value = "";

        }
        private void CreateDayColumns()
        {
            //int iloscDni = DateTime.DaysInMonth(DateTime.Now.Year,month);
            DateTime day = new DateTime(DateTime.Now.Year, GetMonthFromCombo(), 1);

            for (int i = 1; i <= 31; i++)
            {
                string xyz = i.ToString() + "od" + "  ,  " + i.ToString() + "do";
                dataGridView1.Columns.Add(i.ToString() + "od", day.ToShortDateString());
                dataGridView1.Columns.Add(i.ToString() + "do", "");
                day = day.AddDays(1);
                DataGridViewColumn column1 = dataGridView1.Columns[i.ToString() + "od"];
                DataGridViewColumn column2 = dataGridView1.Columns[i.ToString() + "do"];
                column1.Width = 70;
                column2.Width = 70;
                column2.DividerWidth = 1;
                dataGridView1.Columns[i.ToString() + "od"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
                dataGridView1.Columns[i.ToString() + "do"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;

            }

            UpdateColumnsToDate();

            for (int i = 0; i < 3; i++)
            {
                DataGridViewColumn column = dataGridView1.Columns[i];
                column.DividerWidth = 1;
                dataGridView1.Columns[i].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

        }

        private void UpdateColumnsToDate()
        {
            int i = 3;
            int DaysToHide;
            if (comboBoxMonths.SelectedIndex >= 0)
            {
                DaysToHide = 31 - DateTime.DaysInMonth(DateTime.Now.Year, GetMonthFromCombo());
                for (; i < 65 - DaysToHide * 2; i += 2)
                {
                    dataGridView1.Columns[i].Visible = true;
                    dataGridView1.Columns[i + 1].Visible = true;

                    DateTime oldColumnDate = DateTime.Parse(dataGridView1.Columns[i].HeaderText);
                    DateTime currentDate;
                    if (comboBoxYear.SelectedIndex > 0)
                    {
                        currentDate = new DateTime(GetYearFromCombo(), GetMonthFromCombo(), oldColumnDate.Day);
                    }
                    else
                    {
                        currentDate = new DateTime(oldColumnDate.Year, GetMonthFromCombo(), oldColumnDate.Day);
                    }

                    dataGridView1.Columns[i].HeaderText = currentDate.ToShortDateString();
                }

                for (; i < 65; i++)
                    dataGridView1.Columns[i].Visible = false;
            }
            else if (comboBoxYear.SelectedIndex > 0)
            {
                DaysToHide = 31 - DateTime.DaysInMonth(GetYearFromCombo(), GetMonthFromCombo());
                for (; i < 65 - DaysToHide * 2; i += 2)
                {
                    dataGridView1.Columns[i].Visible = true;
                    dataGridView1.Columns[i + 1].Visible = true;

                    DateTime oldColumnDate = DateTime.Parse(dataGridView1.Columns[i].HeaderText);
                    DateTime currentDate = new DateTime(oldColumnDate.Year, comboBoxMonths.SelectedIndex + 1, oldColumnDate.Day);

                    dataGridView1.Columns[i].HeaderText = currentDate.ToShortDateString();
                }

                for (; i < 65; i++)
                    dataGridView1.Columns[i].Visible = false;
            }
        }

        private void dataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            UpdateHarmonogramClass();
            if (!loadingFromDB && !settingUp && e.ColumnIndex > 2 && e.RowIndex >= 0)
            {
                dataGridView1[e.ColumnIndex, e.RowIndex].Style.BackColor = Color.Empty;
                saved = false;
                if (harmonogram.bothTimesAreReady(e.ColumnIndex, e.RowIndex))
                {
                    bool cancel = hoursAreCorrect(e.ColumnIndex, e.RowIndex);
                    if (cancel)
                    {
                        dataGridView1[e.ColumnIndex, e.RowIndex].ErrorText = "Błędna godzina!";
                        MessageBox.Show("Błędna godzina - Konflikt między godziną początku i końca pracy!");
                    }
                    else
                    {
                        dataGridView1[e.ColumnIndex, e.RowIndex].ErrorText = "";
                    }
                }
            }
        }
        private void dataGridView1_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            if (!loadingFromDB)
                if (e.ColumnIndex > 2)
                {
                    if (e.FormattedValue == "")
                    {
                        dataGridView1[e.ColumnIndex, e.RowIndex].Value = "";
                        return;
                    }
                    UpdateHarmonogramClass();
                    String message = harmonogram.ValidateCell(e);
                    e.Cancel = message.Length > 0;
                    if (message.Length > 0)
                        MessageBox.Show(message);
                }
        }

        private bool hoursAreCorrect(int columnIndex, int rowIndex)
        {
            DateTime startTime, stopTime;
            if (columnIndex % 2 == 1)//od
            {
                startTime = DateTime.Parse(dataGridView1[columnIndex, rowIndex].Value.ToString());
                stopTime = DateTime.Parse(dataGridView1[columnIndex + 1, rowIndex].Value.ToString());
            }
            else//do
            {
                startTime = DateTime.Parse(dataGridView1[columnIndex - 1, rowIndex].Value.ToString());
                stopTime = DateTime.Parse(dataGridView1[columnIndex, rowIndex].Value.ToString());
            }

            return (stopTime < startTime);
        }

        private void comboBoxYear_SelectedIndexChanged(object sender, EventArgs e)
        {
            UpdateColumnsToDate();
            FillFromDB();
        }
        private void comboBoxMonths_SelectedIndexChanged(object sender, EventArgs e)
        {
            UpdateColumnsToDate();
            FillFromDB();
        }

        private void buttonSave_Click(object sender, EventArgs e)
        {
            UpdateHarmonogramClass();
            DateTime currentTime = new DateTime(GetYearFromCombo(), GetMonthFromCombo(), 1);
            string messageMiesiac = harmonogram.poprawnieRozplanowanyMiesiac(currentTime);
            if (messageMiesiac.Length != 0)
            {
                MessageBox.Show("Źle rozplanowany dzień! " + currentTime.ToShortDateString() + " " + messageMiesiac);
                string message = harmonogram.Save();
                MessageBox.Show(message);
                saved = true;
            }
            else
            {
                string message = harmonogram.Save();
                MessageBox.Show(message);
                saved = true;
                for (int row_i = 0; row_i < dataGridView1.RowCount - 1; row_i++)
                    for (int col_i = 3; col_i < 65; col_i += 2)
                    {
                        if (harmonogram.onlyOneTimesAreReady(col_i, row_i))
                            HighlightCell(row_i, col_i);
                    }
            }
        }

        private void HighlightCell(int row_i, int col_i)
        {
            int start = GetFirstIndexOfPair(col_i);
            if (dataGridView1[start, row_i].Visible)
            {
                if (dataGridView1[start, row_i].Value.ToString() == "" && dataGridView1[start + 1, row_i].Value.ToString() != "")
                    dataGridView1[start, row_i].Style.BackColor = Color.LightGray;
                else if (dataGridView1[start + 1, row_i].Value.ToString() == "" && dataGridView1[start, row_i].Value.ToString() != "")
                    dataGridView1[start + 1, row_i].Style.BackColor = Color.LightGray;
                else
                {
                    dataGridView1[start, row_i].Style.BackColor = Color.Empty;
                    dataGridView1[start + 1, row_i].Style.BackColor = Color.Empty;
                }
            }
        }

        private int GetFirstIndexOfPair(int columnIndex)
        {
            int ret = columnIndex % 2 == 1 ? columnIndex : columnIndex - 1;
            return ret;
        }

        private void UpdateHarmonogramClass()
        {
            harmonogram = new Harmonogram(dataGridView1);
        }

        private void dataGridView1_CellValidated(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView1[e.ColumnIndex, e.RowIndex].Value == null)
                dataGridView1[e.ColumnIndex, e.RowIndex].Value = "";
        }

        private void btn_check_Click(object sender, EventArgs e)
        {
            UpdateHarmonogramClass();
            DateTime currentTime = new DateTime(GetYearFromCombo(), GetMonthFromCombo(), 1);
            string messageMiesiac = harmonogram.poprawnieRozplanowanyMiesiac(currentTime);
            if (messageMiesiac.Length != 0)
            {
                MessageBox.Show("Źle rozplanowany dzień! " + " " + messageMiesiac);
            }
            else
            {
                string message = "";
                for (int row_i = 0; row_i < dataGridView1.RowCount - 1; row_i++)
                    for (int col_i = 3; col_i < 65; col_i += 2)
                    {
                        if (harmonogram.onlyOneTimesAreReady(col_i, row_i))
                        {
                            message += "Brakuje drugiej godziny ";
                            HighlightCell(row_i, col_i);
                        }
                    }
                if (message.Length == 0)
                    MessageBox.Show("Poprawnie rozplanowany miesiąc");
                else
                    MessageBox.Show(message);
            }

        }

        private void HarmonogramForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!saved)
            {
                var result = MessageBox.Show("Czy chcesz przed wyjściem zapisać zmiany?", "Zmiany nie zostały zapisane!", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1);
                switch (result)
                {
                    case DialogResult.No:
                        break;
                    case DialogResult.Yes:
                        UpdateHarmonogramClass();
                        string message = harmonogram.Save();
                        MessageBox.Show(message);
                        break;
                    default:
                        e.Cancel = true;
                        break;
                }
            }
        }

        private void comboBoxMonths_SelectedValueChanged(object sender, EventArgs e)
        {
            if (!saved)
            {
                var result = MessageBox.Show("Czy chcesz przed wyjściem zapisać zmiany?", "Zmiany nie zostały zapisane!", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1);
                switch (result)
                {
                    case DialogResult.No:
                        break;
                    case DialogResult.Yes:
                        UpdateHarmonogramClass();
                        string message = harmonogram.Save();
                        MessageBox.Show(message);
                        break;
                    default:

                        break;
                }
            }
        }

        private void comboBoxMonths_MouseClick(object sender, MouseEventArgs e)
        {
            if (!saved)
            {
                var result = MessageBox.Show("Czy chcesz zapisać zmiany?", "Zmiany nie zostały zapisane!", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1);
                switch (result)
                {
                    case DialogResult.Yes:
                        UpdateHarmonogramClass();
                        string message = harmonogram.Save();
                        MessageBox.Show(message);
                        break;
                    default:
                        break;
                }
            }

        }
    }
}
